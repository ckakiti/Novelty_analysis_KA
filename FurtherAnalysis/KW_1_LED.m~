% Read the video file (.mp4) %%%%%%%%%%%%%%%%%%%
clear
close all
clc

basefolder = '/home/alex/Programs/DeepLabCut_new/DeepLabCut/videos/ATLA_DLC';

currMouse = 'Earth';
currDate  = '210511';
% cd(['/home/alex/Programs/DeepLabCut_new/DeepLabCut/videos/Mitsuko_photometry_190617/' ...
%     currMouse, '/' currDate])
% cd(['/Users/cakiti/Dropbox (Uchida Lab)/Korleki Akiti/ForMelissa/' currMouse])
cd(fullfile(basefolder, currMouse, currDate))

% import video information
%tic
for i = 1:1
    
    folder = pwd;
    rgbfile = dir('*Converted.avi');%'*Converted.avi' %'*.mp4'
    videoObject = VideoReader(rgbfile(1).name);
    numberOfFrames = round(videoObject.Duration*videoObject.FrameRate);
    vidHeight = videoObject.Height;
    vidWidth = videoObject.Width;
    
end

% import LED position (from MarkObjPos.m)
cd ../Analyzed_Data_1obj_7cm_nose %Analyzed_Data_1obj
load('Arena_Obj_Pos.mat')
cd ..

LEDpos = int64(LEDpos);

% import saved LED on/off info
sync_light_name = dir('save*max');
if(~isempty(sync_light_name))
    disp('LED save file detected')
    sync_light = csvread(sync_light_name.name);
end
    
%% Find when the light was on (WARNING: takes a while) %%%%%%%%%%%%%%%%%%%%%%%%%%
disp('start')

save_time = [5000:5000:numberOfFrames-1 numberOfFrames];
%sync_light = zeros(1,numberOfFrames);
%sync_light = csvread('save_42000');
for frame = 1:numberOfFrames %3000
    disp(frame)
    
    % Extract one frame and make it grayscale
    
    %thisFrame = read(videoObject, frame);
    videoObject.currentTime = (frame-1)/videoObject.FrameRate;
    thisFrame = readFrame(videoObject);
    %thisFrame1 = rgb2gray(thisFrame);
    
    
    % Cut out the area outside of the LED
    
    % thisFrame1(1:420,:)= []; thisFrame1(:,70:end)= []; thisFrame1(:,1:45)= []; thisFrame1(20:end,:)= [];
    thisFrame1 = thisFrame(LEDpos(2):LEDpos(4), LEDpos(1):LEDpos(3),:);
    thisFrame1 = rgb2gray(thisFrame1);
    
    
    % Find how bright the LED is on this frame
    
    %sync_light(1,frame) = round(mean(mean(thisFrame1)));
    sync_light(1,frame) = round(max(max(thisFrame1)));
    
    if (any(frame==save_time))
        disp(['save: ' num2str(frame)])
        csvwrite(['save_' num2str(frame)], sync_light)
    end
end
disp('end')
%clear frame thisFrame thisFrame1

%% Plot when the light was on %%%%%%%%%%%%%%%%%%%%%%%%%%
sync_norm = zscore(sync_light);
%middle = (max(sync_norm)-min(sync_norm))/2;
middle = 9; %%%%%%%%% sometimes cutoff needs to be adjusted 
crosses = crossing(sync_norm, [], middle);

% sync_norm = double(sync_light);
% middle = 25;
% crosses = crossing(sync_norm, [], middle);

disp(['middle= ' num2str(middle)])

close all
figure(1)
set(gcf, 'Position', [46 329 1867 450])
hold on
plot(sync_norm);
line([crosses; crosses], repmat([0 10], length(crosses), 1)') % [-1.5 2.5]
line([0 length(sync_norm)], [middle middle], 'color', 'k')

LED_on = crosses(1:2:end);
diff_LED_on = diff(LED_on);
missing_int = round(diff_LED_on/mode(diff_LED_on));
missing_on = find(missing_int~=1);
if(~isempty(missing_on))
    disp(['missing LED: ' num2str(length(missing_on))])
    line([LED_on(missing_on); LED_on(missing_on)], ...
        repmat([-10 0], length(missing_on), 1)', 'color', 'r')
end

pause

missing_update = missing_on;
for addIn = 1:length(missing_update)
    %missingCurr = ( LED_on(missing_on(addIn)) + LED_on(missing_on(addIn)+1) ) / 2;
    LED_on_curr = LED_on(missing_update(addIn));
    
    how_many_missing = missing_int(missing_on(addIn))-1;
    addIn_index = repmat(median(diff_LED_on), 1, how_many_missing);
    addIn_index = cumsum(addIn_index);
    
    missingCurr    = LED_on_curr + addIn_index;
    LED_on         = [LED_on(1:missing_update(addIn)) ...
                      missingCurr ...
                      LED_on(missing_update(addIn)+1:end)];
    missing_update = missing_update+length(missingCurr);
    
    disp(addIn)
    disp(missingCurr)
    line([missingCurr; missingCurr], ...
    repmat([-12 -10], length(missingCurr), 1)', 'color', 'b')
    pause
end
%line([LED_on; LED_on], ...
%    repmat([-4.5 -2.5], length(LED_on), 1)', 'color', 'b')

figure(2)
plot(LED_on, 'k.-')

% fix additional errors (noise exceeding threshold)
if(0)
    find(diff(LED_on)<100);
    
end
%% save crossing (LED on/off) variable
close all
csvwrite('LED_on', LED_on)

